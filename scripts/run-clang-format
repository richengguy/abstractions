#!/bin/env python3
import argparse
import concurrent.futures
import subprocess
from concurrent.futures import ThreadPoolExecutor
from difflib import unified_diff
from pathlib import Path


def collect_files(*paths: Path) -> list[Path]:
    files: list[Path] = []
    for path in paths:
        files.extend(path.glob("**/*.h"))
        files.extend(path.glob("**/*.hpp"))
        files.extend(path.glob("**/*.c"))
        files.extend(path.glob("**/*.cpp"))

    return files


def lint(config: Path, file: Path) -> str:
    output = subprocess.run(
        ["clang-format", f"--style={config}", file.as_posix()],
        capture_output=True,
        text=True,
    )
    formatted = output.stdout.splitlines()

    if len(formatted) == 0:
        return ""

    with file.open("rt") as f:
        original = f.read().splitlines()

    return "\n".join(unified_diff(original, formatted))


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("mode", choices=["lint", "format"], help="clang-format mode")
    parser.add_argument(
        "paths", metavar="path", nargs="+", help="source code path", type=Path
    )
    parser.add_argument("--config", "-c", default=Path(".clang-format"), type=Path)
    args = parser.parse_args()

    files = collect_files(*args.paths)
    print("Collected:")
    for f in files:
        print(f"  {f}")

    for f in files:
        print(lint(args.config, f))
        print("====")


if __name__ == "__main__":
    main()
